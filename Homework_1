/*783. Minimum Distance Between BST Nodes*/

class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        self.temp=None
        self.minDiff=sys.maxsize
        def inorder_traverse(node):
            if node is None:
                return
            inorder_traverse(node.left)
            if self.temp is None:
                self.temp=node
            else:
                self.minDiff=min(node.val-self.temp.val,self.minDiff)
                self.temp=node
            inorder_traverse(node.right)
        inorder_traverse(root)
        return self.minDiff
        
/*698. Partition to K Equal Sum Subsets/
        class Solution(object):
    def canPartitionKSubsets(self, nums, k):
        target, rem = divmod(sum(nums), k)
        if rem: return False

        def search(groups):
            if not nums: return True
            v = nums.pop()
            for i, group in enumerate(groups):
                if group + v <= target:
                    groups[i] += v
                    if search(groups): return True
                    groups[i] -= v
                if not group: break
            nums.append(v)
            return False

        nums.sort()
        if nums[-1] > target: return False
        while nums and nums[-1] == target:
            nums.pop()
            k -= 1

        return search([0] * k)
